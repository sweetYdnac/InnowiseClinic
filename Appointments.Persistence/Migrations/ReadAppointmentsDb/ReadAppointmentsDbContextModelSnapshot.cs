// <auto-generated />
using System;
using Appointments.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Appointments.Persistence.Migrations.ReadAppointmentsDb
{
    [DbContext(typeof(ReadAppointmentsDbContext))]
    partial class ReadAppointmentsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Appointments.Domain.Entities.Read.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DoctorFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PatientPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cd00fb6-0a51-4aef-99bd-a1f6c00203c1"),
                            DoctorFullName = "Test Test ",
                            IsApproved = true,
                            PatientFullName = "Alex Lorem ",
                            PatientId = new Guid("ea1afb83-5da9-4b81-ad94-b6a62eb25d43"),
                            ServiceName = "Examination"
                        },
                        new
                        {
                            Id = new Guid("51e15af0-a487-48aa-80bc-2c45abae4096"),
                            DoctorFullName = "Test Test ",
                            IsApproved = true,
                            PatientFullName = "Evgeny Koreba Sweety",
                            PatientId = new Guid("b2957690-4d76-468c-a449-fb9529283857"),
                            ServiceName = "Filling"
                        });
                });

            modelBuilder.Entity("Appointments.Domain.Entities.Read.AppointmentResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Conclusion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp");

                    b.Property<string>("DoctorSpecializationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PatientDateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Recomendations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("AppointmentsResults");

                    b.HasData(
                        new
                        {
                            Id = new Guid("176999c3-035e-43e1-b68a-f9071dc7a016"),
                            AppointmentId = new Guid("9cd00fb6-0a51-4aef-99bd-a1f6c00203c1"),
                            Complaints = "nothing new",
                            Conclusion = "healthy",
                            Date = new DateTime(2023, 3, 3, 18, 9, 1, 347, DateTimeKind.Local).AddTicks(5123),
                            DoctorSpecializationName = "Therapist",
                            PatientDateOfBirth = new DateOnly(1980, 11, 28),
                            Recomendations = "drink water"
                        },
                        new
                        {
                            Id = new Guid("16fc93ad-cb73-4a78-9538-f808f3e812cd"),
                            AppointmentId = new Guid("51e15af0-a487-48aa-80bc-2c45abae4096"),
                            Complaints = "here we go",
                            Conclusion = "have a disease",
                            Date = new DateTime(2023, 2, 26, 18, 9, 1, 347, DateTimeKind.Local).AddTicks(5150),
                            DoctorSpecializationName = "Dentist",
                            PatientDateOfBirth = new DateOnly(2000, 6, 15),
                            Recomendations = "go for a walk"
                        });
                });

            modelBuilder.Entity("Appointments.Domain.Entities.Read.AppointmentResult", b =>
                {
                    b.HasOne("Appointments.Domain.Entities.Read.Appointment", "Appointment")
                        .WithOne("AppointmentResult")
                        .HasForeignKey("Appointments.Domain.Entities.Read.AppointmentResult", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Appointments.Domain.Entities.Read.Appointment", b =>
                {
                    b.Navigation("AppointmentResult");
                });
#pragma warning restore 612, 618
        }
    }
}
