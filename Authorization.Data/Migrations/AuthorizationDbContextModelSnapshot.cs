// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace Authorization.Data.Migrations
{
    [DbContext(typeof(AuthorizationDbContext))]
    partial class AuthorizationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Authorization.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("777bf98b-4eb8-4da0-b09f-c9fed3419288"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c5ac71a-5439-4227-ac18-e2f7d36dc7ce",
                            CreatedAt = new DateTime(2023, 3, 5, 12, 31, 9, 543, DateTimeKind.Utc).AddTicks(4452),
                            CreatedBy = new Guid("777bf98b-4eb8-4da0-b09f-c9fed3419288"),
                            Email = "admin@admin",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN",
                            NormalizedUserName = "ADMIN@ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBKk+kfGvwm34O4Wgb4IPr3yeFic4peNR4Y8/Io09qVPeKcUqX/Lkz3uL5LhvbA5jA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8edb80d2-d6fb-4117-8a57-6a0b00ca2867",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 3, 5, 12, 31, 9, 543, DateTimeKind.Utc).AddTicks(4454),
                            UpdatedBy = new Guid("777bf98b-4eb8-4da0-b09f-c9fed3419288"),
                            UserName = "admin@admin"
                        },
                        new
                        {
                            Id = new Guid("62dc0bbf-6423-41a5-8a35-ebda51df2eb2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c16f7f2-b456-4655-a4c5-b86a0190e860",
                            CreatedAt = new DateTime(2023, 3, 5, 12, 31, 9, 611, DateTimeKind.Utc).AddTicks(3154),
                            CreatedBy = new Guid("62dc0bbf-6423-41a5-8a35-ebda51df2eb2"),
                            Email = "patient@patient",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@PATIENT",
                            NormalizedUserName = "PATIENT@PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEPd1oQ9eDIbA6zXun8MZWBKMvKh1gyrL7PJrAXjKDbslmrMR41xj3E1z0PcKhv5OvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d6005cc-c399-4d0e-843f-c08e867ac6f2",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 3, 5, 12, 31, 9, 611, DateTimeKind.Utc).AddTicks(3156),
                            UpdatedBy = new Guid("62dc0bbf-6423-41a5-8a35-ebda51df2eb2"),
                            UserName = "patient@patient"
                        },
                        new
                        {
                            Id = new Guid("a2361776-cc5a-45c2-bdca-390c820ab7c7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7379a3c-71bd-42f9-8560-5122bc5abfb4",
                            CreatedAt = new DateTime(2023, 3, 5, 12, 31, 9, 679, DateTimeKind.Utc).AddTicks(1821),
                            CreatedBy = new Guid("a2361776-cc5a-45c2-bdca-390c820ab7c7"),
                            Email = "doctor@doctor",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@DOCTOR",
                            NormalizedUserName = "DOCTOR@DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEBkiQAT5yjgWALMnJ1GCCx6u5nBi4kIIONv+49GQOAJUKjL16Db8GVGip5pX4nTmEA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e8569c4-3611-425c-9d42-680091021e96",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 3, 5, 12, 31, 9, 679, DateTimeKind.Utc).AddTicks(1825),
                            UpdatedBy = new Guid("a2361776-cc5a-45c2-bdca-390c820ab7c7"),
                            UserName = "doctor@doctor"
                        },
                        new
                        {
                            Id = new Guid("1b6a0d76-f6cc-48c4-ac24-5845c5d8ebde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "069d11c7-fa86-48e9-8029-0b6f47196e9e",
                            CreatedAt = new DateTime(2023, 3, 5, 12, 31, 9, 747, DateTimeKind.Utc).AddTicks(3914),
                            CreatedBy = new Guid("1b6a0d76-f6cc-48c4-ac24-5845c5d8ebde"),
                            Email = "receptionist@receptionist",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEPTIONIST@RECEPTIONIST",
                            NormalizedUserName = "RECEPTIONIST@RECEPTIONIST",
                            PasswordHash = "AQAAAAIAAYagAAAAEHYSTlkHT9BtbNh6P02emFGeQd37zZLj+WDFyA3r936rm3dU9pLZTFLaUjhm8Jm/Bg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28592396-731c-412b-a2a1-867391b0025d",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 3, 5, 12, 31, 9, 747, DateTimeKind.Utc).AddTicks(3916),
                            UpdatedBy = new Guid("1b6a0d76-f6cc-48c4-ac24-5845c5d8ebde"),
                            UserName = "receptionist@receptionist"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6b05f0d-7dce-4b3b-9d25-4d183ccbe5d5"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c8430684-4592-470e-a346-d55a5498f605"),
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = new Guid("e3f6e525-e23d-4c2b-ab27-458e38b162fa"),
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = new Guid("e745a7e8-2870-4095-af95-270b9f1ff5de"),
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("777bf98b-4eb8-4da0-b09f-c9fed3419288"),
                            RoleId = new Guid("a6b05f0d-7dce-4b3b-9d25-4d183ccbe5d5")
                        },
                        new
                        {
                            UserId = new Guid("62dc0bbf-6423-41a5-8a35-ebda51df2eb2"),
                            RoleId = new Guid("c8430684-4592-470e-a346-d55a5498f605")
                        },
                        new
                        {
                            UserId = new Guid("a2361776-cc5a-45c2-bdca-390c820ab7c7"),
                            RoleId = new Guid("e3f6e525-e23d-4c2b-ab27-458e38b162fa")
                        },
                        new
                        {
                            UserId = new Guid("1b6a0d76-f6cc-48c4-ac24-5845c5d8ebde"),
                            RoleId = new Guid("e745a7e8-2870-4095-af95-270b9f1ff5de")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authorization.Data.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
