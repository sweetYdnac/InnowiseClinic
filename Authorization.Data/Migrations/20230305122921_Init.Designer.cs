// <auto-generated />
using System;
using Authorization.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Authorization.Data.Migrations
{
    [DbContext(typeof(AuthorizationDbContext))]
    [Migration("20230305122921_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Authorization.Data.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("777bf98b-4eb8-4da0-b09f-c9fed3419288"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ee77f4e-96ec-433a-b9c9-15d9ce0fb643",
                            CreatedAt = new DateTime(2023, 3, 5, 12, 29, 20, 583, DateTimeKind.Utc).AddTicks(9520),
                            CreatedBy = new Guid("777bf98b-4eb8-4da0-b09f-c9fed3419288"),
                            Email = "admin@admin",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN",
                            NormalizedUserName = "ADMIN@ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEC8pMr0Es5Q5RYvABzahj8QRxW9xNlO+Onb6Srptwup8C2Zcuo/Y6KiWG4uycnz+mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f14a4646-4b7f-42f9-a0fe-0bd60a944a2d",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 3, 5, 12, 29, 20, 583, DateTimeKind.Utc).AddTicks(9522),
                            UpdatedBy = new Guid("777bf98b-4eb8-4da0-b09f-c9fed3419288"),
                            UserName = "admin@admin"
                        },
                        new
                        {
                            Id = new Guid("62dc0bbf-6423-41a5-8a35-ebda51df2eb2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1d9ca8f-220d-4ae6-b69e-c2c348d91c63",
                            CreatedAt = new DateTime(2023, 3, 5, 12, 29, 20, 651, DateTimeKind.Utc).AddTicks(9058),
                            CreatedBy = new Guid("62dc0bbf-6423-41a5-8a35-ebda51df2eb2"),
                            Email = "patient@patient",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PATIENT@PATIENT",
                            NormalizedUserName = "PATIENT@PATIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEKZCKFAkiXAZrR5Fz+7Y9E6pqF0TwA4JxpJ9OIYLIDG3YKcn21sRsRaxsMPiGsVOgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d53958c-75a1-4ac6-b55f-0a155522ce4f",
                            Status = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 3, 5, 12, 29, 20, 651, DateTimeKind.Utc).AddTicks(9060),
                            UpdatedBy = new Guid("62dc0bbf-6423-41a5-8a35-ebda51df2eb2"),
                            UserName = "patient@patient"
                        },
                        new
                        {
                            Id = new Guid("a2361776-cc5a-45c2-bdca-390c820ab7c7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b729fe4-ff5c-4bc1-92a2-fbd0727d1331",
                            CreatedAt = new DateTime(2023, 3, 5, 12, 29, 20, 719, DateTimeKind.Utc).AddTicks(6706),
                            CreatedBy = new Guid("a2361776-cc5a-45c2-bdca-390c820ab7c7"),
                            Email = "doctor@doctor",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@DOCTOR",
                            NormalizedUserName = "DOCTOR@DOCTOR",
                            PasswordHash = "AQAAAAIAAYagAAAAECECxob66wSt6E4sEhS49kUScbN8XpHgbo92sLUc9WMZcUXfTk5RPvYEd3I2NrNmIQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5f4102cc-86b6-4596-a26c-9c9aab4515ab",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 3, 5, 12, 29, 20, 719, DateTimeKind.Utc).AddTicks(6708),
                            UpdatedBy = new Guid("a2361776-cc5a-45c2-bdca-390c820ab7c7"),
                            UserName = "doctor@doctor"
                        },
                        new
                        {
                            Id = new Guid("1b6a0d76-f6cc-48c4-ac24-5845c5d8ebde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a585563e-4fc9-47d0-912d-ddbbac5fcc3b",
                            CreatedAt = new DateTime(2023, 3, 5, 12, 29, 20, 787, DateTimeKind.Utc).AddTicks(9346),
                            CreatedBy = new Guid("1b6a0d76-f6cc-48c4-ac24-5845c5d8ebde"),
                            Email = "receptionist@receptionist",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RECEPTIONIST@RECEPTIONIST",
                            NormalizedUserName = "RECEPTIONIST@RECEPTIONIST",
                            PasswordHash = "AQAAAAIAAYagAAAAEEmmzqoecKpxNKY/6dqLXDupYIunNmuL3d9RZRLQX7xRGqes4E7u6/sOo7U/G3CS0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "69022992-1e1a-4d83-8e9c-12070797ad95",
                            Status = 1,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2023, 3, 5, 12, 29, 20, 787, DateTimeKind.Utc).AddTicks(9349),
                            UpdatedBy = new Guid("1b6a0d76-f6cc-48c4-ac24-5845c5d8ebde"),
                            UserName = "receptionist@receptionist"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d8adf50-1a0e-4789-b72e-ee7b5b2daed8"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("27346c79-7fb3-4aa1-b844-5acbb7b73ef2"),
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = new Guid("5513b382-4cdb-4790-ab24-1d3888b45eac"),
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        },
                        new
                        {
                            Id = new Guid("3fe3ac0b-3e5c-47b1-afc7-e931e3fefe05"),
                            Name = "Receptionist",
                            NormalizedName = "RECEPTIONIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("777bf98b-4eb8-4da0-b09f-c9fed3419288"),
                            RoleId = new Guid("0d8adf50-1a0e-4789-b72e-ee7b5b2daed8")
                        },
                        new
                        {
                            UserId = new Guid("62dc0bbf-6423-41a5-8a35-ebda51df2eb2"),
                            RoleId = new Guid("27346c79-7fb3-4aa1-b844-5acbb7b73ef2")
                        },
                        new
                        {
                            UserId = new Guid("a2361776-cc5a-45c2-bdca-390c820ab7c7"),
                            RoleId = new Guid("5513b382-4cdb-4790-ab24-1d3888b45eac")
                        },
                        new
                        {
                            UserId = new Guid("1b6a0d76-f6cc-48c4-ac24-5845c5d8ebde"),
                            RoleId = new Guid("3fe3ac0b-3e5c-47b1-afc7-e931e3fefe05")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authorization.Data.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Authorization.Data.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
